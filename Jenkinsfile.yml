def params = [
    repoAPISOAP  : 'https://github.com/andrewgarcias/BaseSOAP.git',
    repoImagen : 'https://github.com/edwgarciaadl/k8sconfiguration.git',
    containerName : 'sonar',
    containerImage : 'library/sonarqube:latest',
    artifactfolder : 'artifact',
    jarFolder : '/my-app/target',
    credentialsArtifactory : 'admin:artifactory',
    urlArtifactory : 'http://192.168.0.25:8082/artifactory/generic-local'

]

properties([
    pipelineTriggers([
        githubPush()
    ])
])

node {
    def error = null
    try {
        if(env.BRANCH_NAME=="master" || env.BRANCH_NAME=="develop") {
            cleanUp()
            checkout()
            buildArtifact(params.artifactfolder)
            if(env.BRANCH_NAME=="master"){
            securitySecrets()
            }
            sh " echo prueba master "
        }
        
    } 
    catch(caughtError) {
        error = caughtError
        currentBuild.result = 'FAILURE'
    }
    finally {
        cleanWs()
        if (error) {
            throw error
        }
    }
}

//0. cleanup
def cleanUp(){
    stage("Clean Up"){
        parallel('Master': {
        node('master'){
            stage('Cleanup'){
                cleanWs()
            }
        }
        }, /**'Windows': {
                node('windows'){
                    stage('Cleanup'){        
                        cleanWs()
                    }
        }
        }**/)
    }
}

def checkout() {
    stage('Checkout') {
        checkout scm
    }
}
/**
//1. Setup
/**
def setUp(){
    node('windows'){
        stage('Setup'){
            deploy(params.containerImage, params.containerName)
        }
    }
}
def deploy(image, container){
    echo 'Desplegando Sonarqube'
    bat label: '', script: "docker pull ${image}"
    bat label: '', script: "docker run -d -p 9000:9000 --name=${container} sonarqube"
}
**/
/**
def setUp(){
    node('master'){
        stage('Setup'){
            cloneyaml(params.repoImagen)
        }
    }
}
def cloneyaml(imageRepository){
    sh "mkdir pruebayaml"
    checkout([$class: 'GitSCM', branches: [[name: '/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'pruebayaml']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github_token', url: "${imageRepository}"]]])
    def error = null
    try{
        sh "kubectl delete namespace devops"
        sh "kubectl create namespace devops"
        sh "cd pruebayaml && kubectl apply -f jenkins-deployment.yaml -n devops"
        sh "cd pruebayaml && kubectl apply -f jenkins-service.yaml -n devops"
    }
    catch(caughtError) {
        error = caughtError
        currentBuild.result = 'SUCCESS'
        sh "kubectl create namespace devops"
        sh "cd pruebayaml && kubectl apply -f jenkins-deployment.yaml -n devops"
        sh "cd pruebayaml && kubectl apply -f jenkins-service.yaml -n devops"
    }
}
**/
//2. Chekout
/**
node('master'){
    stage('Chekout'){
        cloneAPISOAP(params.repoAPISOAP)
    }
}

def cloneAPISOAP(repository){
    sh "mkdir pruebaAPISOAP"
    checkout([$class: 'GitSCM', branches: [[name: '/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'pruebaAPISOAP']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github_token', url: "${repository}"]]])
}

/**
//3. Instalar dependencias
node('master'){
    stage('InstallDependencies'){
        gradle "GRADLE_LATEST"
        sh 'gradle --version'
        sh 'java -version'
        sh 'brew install maven'
        sh 'mvn -version'
    }
}
**/
/**
//4. test -no
node('master'){
    stage('TEST'){
        executeAPISOAP()
    }
}

def executeAPISOAP(){
    gradle "GRADLE_LATEST"
    withGradle {
    sh 'cd /Users/edwin.garcia/.jenkins/pruebaAPI && chmod +x gradlew && ./gradlew -b build.gradle clean test -D cucumber.options=\"--tags @Calculator\" aggregate'
    }
    //sh "cd pruebaAPISOAP && chmod +x gradlew && ./gradlew -b build.gradle clean test -D cucumber.options=\"--tags @Calculator\" aggregate"
        /**
        publishHTML(target: [
            reportName : 'Serenity',
            reportDir:   'pruebaAPISOAP/target/site/serenity',
            reportFiles: 'index.html',
            keepAll:     true,
            alwaysLinkToLastBuild: true,
            allowMissing: false
        ])
        **/     
    
//}

/**
//5. Static code analysis (Sonarqube)
node('master'){
    stage('Static code analysis'){
        staticCodeAnalisis(params.artifactfolder)
    }
}

def staticCodeAnalisis(folder){
    sh "mkdir ${folder}"
    //sh "cd ${folder} && mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false"
    sh "cd ${folder} && mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false && cd my-app && mvn clean package -DskipTests=true && mvn clean install"
    //sh "cd ${folder}/my-app/target && mvn clean package -DskipTests=true"
    sh "cd ${folder}/my-app && mvn sonar:sonar -Dsonar.host.url=http://192.168.0.36:9000/ -DskipTests=true -Dsonar.projectKey=82da5847de3cc454e1832d980101dcfc98c04955"

}
/**
//5. Check Src (Git secrets) --no
node('master'){
    stage(
        
    )
}

//6. Report - Plugin -jacoco
node('master'){
    stage(
        ?download
    )
}

**/

//7. Build
def buildArtifact(){
    node('master'){
        stage('Build'){
            buildArtifact(params.artifactfolder)
        }
    }
}
def buildArtifact(folder){
    sh "mkdir ${folder}"
    sh "cd ${folder} && mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false && cd my-app && mvn clean package -DskipTests=true && mvn clean install"
    
    //sh "cd ${folder}/my-app/target && mvn clean package -DskipTests=true"
    //sh "cd ${folder}/my-app && mvn clean install"
} 

/**
//8. Publish
node('master'){
    stage('Publish'){
        uploadArtifact(params.artifactfolder,params.jarFolder)
    }
}


def uploadArtifact(folder,jarFolder){
    //sh """cd ${folder}/${jarFolder} && pwd && curl -u ${credentials} -T my-app-1.0-SNAPSHOT.jar "${url}/my-app-1.0-SNAPSHOT.jar" """
    //archiveArtifacts artifacts: "${folder}${jarFolder}/my-app-1.0-SNAPSHOT.jar", fingerprint: true
    def server = Artifactory.server 'artifactory'

    def uploadSpec = """{
        "files": [{
                    "pattern": "${folder}${jarFolder}/my-app-1.0-SNAPSHOT.jar",
                    "target": "generic-local"
                }
            ]
        }"""

    server.upload(uploadSpec)
}
**/

//9. Security - secrets (git-secrets, x-ray, dependabot)
def securitySecrets(){
    node('master'){
        stage('Security-Secrets'){
            sh "cd .. && cd Multiprueba_master && ls && git secrets --install && git secrets --add 'password\\s*=\\s*.+' && git secrets --scan -r ."
        }
    }
}


/**
//10. Deploy
node('windows'){
    stage('Deploy'){
        desployArtifact()
    }
}

def desployArtifact(){
    //bat label: '', script: """curl -u ${credentials} -O "${url}/my-app-1.0-SNAPSHOT.jar" && dir"""
    def server = Artifactory.server 'artifactory'
    def downloadSpec = """{
        "files": [
        {
            "pattern": "generic-local/my-app-1.0-SNAPSHOT.jar",
            "target": "artifact/"
            }
        ]
        }"""
    server.download spec: downloadSpec

}


/**
//11. Notify
node('master'){
    stage('Notify'){
        mail(
        bcc: '',
        body: "<p>Pipeline desplegado con exito :D</p> <p><span style=\"font-size: 18px; font-family: arial\">PIPELINE FINISHED: Job ‘${env.JOB_NAME}’ run #<strong>${env.BUILD_NUMBER}</strong></span></p><p>Executed by: <strong>${USER}</strong></p><p>Check console output <a href=‘${env.BUILD_URL}’>here!</a></p>",
        cc: '',
        charset: 'UTF-8',
        from: '',
        mimeType: 'text/html',
        replyTo: '',
        subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}",
        to: "edwgarcia-25@hotmail.com"
        ) 
    }
}

//12. Clean-workspace
stage("Clean-workspace"){
    parallel('Master': {
        node('master'){
            stage('Clean-workspace'){
                cleanWs()
            }
        }
        }, 'Windows': {
        node('windows'){
            stage('Clean-workspace'){
                cleanWs()
            }
        }
        })
}
**/
